"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkresourcepackeditor_browser"] = self["webpackChunkresourcepackeditor_browser"] || []).push([["platforms/browser"],{

/***/ "./src/platforms/browser/BrowserUtils.ts":
/*!***********************************************!*\
  !*** ./src/platforms/browser/BrowserUtils.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BrowserUtils)\n/* harmony export */ });\n/* harmony import */ var _rpe_error_FailedRequestError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../rpe/error/FailedRequestError */ \"./src/rpe/error/FailedRequestError.ts\");\n/* harmony import */ var _rpe_util_Future__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../rpe/util/Future */ \"./src/rpe/util/Future.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nclass BrowserUtils {\r\n    constructor() { }\r\n    static initFileCache() {\r\n        if (this.FILE_CACHE_IDB)\r\n            return this.FILE_CACHE_IDB;\r\n        this.FILE_CACHE_IDB = new _rpe_util_Future__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n        let req = window.indexedDB.open(\"\", 1);\r\n        req.onerror = () => {\r\n            this.FILE_CACHE_IDB.completeExceptionally(new _rpe_error_FailedRequestError__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"Failed to open the file cache IndexedDB: \" + req.error));\r\n            this.FILE_CACHE_IDB = null;\r\n        };\r\n        req.onsuccess = () => {\r\n            let db = req.result;\r\n            db.onclose = () => {\r\n            };\r\n            this.FILE_CACHE_IDB.complete(req.result);\r\n        };\r\n        req.onupgradeneeded = () => {\r\n            let db = req.result;\r\n            let objectStore = db.createObjectStore(this.FILE_CACHE_IDB_OBJECTSTORE_KEY, { \"keyPath\": \"fullKey\" });\r\n            objectStore.createIndex(\"fullKey\", \"fullKey\", { unique: true });\r\n        };\r\n        return this.FILE_CACHE_IDB;\r\n    }\r\n    static initTransaction(readWrite = false) {\r\n        return this.initFileCache().thenApply(db => {\r\n            return db.transaction(this.FILE_CACHE_IDB_OBJECTSTORE_KEY, readWrite ? \"readwrite\" : \"readonly\");\r\n        });\r\n    }\r\n    static storeFile(entry) {\r\n        return this.initTransaction(true).thenCompose(tr => {\r\n            let objectStore = tr.objectStore(this.FILE_CACHE_IDB_OBJECTSTORE_KEY);\r\n            objectStore.add(entry);\r\n            return _rpe_util_Future__WEBPACK_IMPORTED_MODULE_1__[\"default\"].asyncFuture(() => __awaiter(this, void 0, void 0, function* () {\r\n                let f = new _rpe_util_Future__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n                while (true) {\r\n                    let req = objectStore.get(entry.fullKey); // TODO: this breaks with async functions\r\n                    let future = new _rpe_util_Future__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n                    req.onsuccess = () => {\r\n                        future.complete(!req);\r\n                    };\r\n                    req.onerror = () => {\r\n                        future.completeExceptionally(req.error);\r\n                    };\r\n                    if (yield future) {\r\n                        break;\r\n                    }\r\n                    else {\r\n                        entry.referenceID = this.genereateReferenceID();\r\n                        entry.fullKey = entry.projectID + \"/\" + entry.referenceID;\r\n                    }\r\n                }\r\n                tr.oncomplete = () => {\r\n                    f.complete(entry.referenceID);\r\n                };\r\n                tr.onerror = () => {\r\n                    f.completeExceptionally(tr.error);\r\n                };\r\n                return yield f;\r\n            }));\r\n        });\r\n    }\r\n    static readFile(projectID, referenceID) {\r\n        return this.initTransaction().thenCompose(tr => {\r\n            let objectStore = tr.objectStore(this.FILE_CACHE_IDB_OBJECTSTORE_KEY);\r\n            let f = new _rpe_util_Future__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n            let req = objectStore.get(projectID + \"/\" + referenceID);\r\n            req.onsuccess = () => {\r\n                var _a;\r\n                f.complete((_a = req.result) !== null && _a !== void 0 ? _a : null);\r\n            };\r\n            req.onerror = () => {\r\n                f.completeExceptionally(req.error);\r\n            };\r\n            return f;\r\n        });\r\n    }\r\n    static genereateReferenceID() {\r\n        return crypto.randomUUID();\r\n    }\r\n    static createSavedEntry(projectID, referenceID, handle) {\r\n        return {\r\n            fullKey: projectID + \"/\" + referenceID,\r\n            projectID: projectID,\r\n            referenceID: referenceID !== null && referenceID !== void 0 ? referenceID : this.genereateReferenceID(),\r\n            lastKnownName: handle.name,\r\n            handle: handle\r\n        };\r\n    }\r\n    static createSavedProject(projectID) {\r\n    }\r\n}\r\nBrowserUtils.BINDING_KEY = \"browser\";\r\nBrowserUtils.FILE_CACHE_IDB_KEY = \"filecache\";\r\nBrowserUtils.FILE_CACHE_IDB_OBJECTSTORE_KEY = \"saved_files\";\r\nBrowserUtils.FILE_CACHE_IDB = null;\r\n\n\n//# sourceURL=webpack://resourcepackeditor-browser/./src/platforms/browser/BrowserUtils.ts?");

/***/ }),

/***/ "./src/platforms/browser/RPEBrowserLocalFile.ts":
/*!******************************************************!*\
  !*** ./src/platforms/browser/RPEBrowserLocalFile.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RPEBrowserLocalFile)\n/* harmony export */ });\n/* harmony import */ var _rpe_error_UnsupportedOperationError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../rpe/error/UnsupportedOperationError */ \"./src/rpe/error/UnsupportedOperationError.ts\");\n/* harmony import */ var _rpe_platform_RPEPlatformLocalFile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../rpe/platform/RPEPlatformLocalFile */ \"./src/rpe/platform/RPEPlatformLocalFile.ts\");\n/* harmony import */ var _rpe_util_Future__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../rpe/util/Future */ \"./src/rpe/util/Future.ts\");\n/* harmony import */ var _BrowserUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BrowserUtils */ \"./src/platforms/browser/BrowserUtils.ts\");\n\r\n\r\n\r\n\r\nclass RPEBrowserLocalFile extends _rpe_platform_RPEPlatformLocalFile__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n    size() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    canRead() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    canWrite() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    requestReadPermission() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    requestWritePermission() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    lastKnownName() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    isMissing() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    tryResolve() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    requestResolution() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    serialize(project) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    /**\r\n     * Creates a new file.\r\n     * @param handle\r\n     * @param file\r\n     * @param data\r\n     */\r\n    constructor(handle, file, data) {\r\n        super(_BrowserUtils__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BINDING_KEY);\r\n        if (handle) {\r\n            this._handle = handle;\r\n        }\r\n        if (file) {\r\n            this._file = _rpe_util_Future__WEBPACK_IMPORTED_MODULE_2__[\"default\"].completedFuture(file);\r\n        }\r\n        if (data) {\r\n            this._referenceId = data.referenceId;\r\n            this._lastKnownName = data.lastKnownName;\r\n        }\r\n    }\r\n    _getReferenceId() {\r\n        if (this._referenceId)\r\n            return this._referenceId;\r\n        else\r\n            return this._referenceId = crypto.randomUUID();\r\n    }\r\n    _loadFile() {\r\n        if (this._file)\r\n            return this._file;\r\n        else\r\n            return this._file = _rpe_util_Future__WEBPACK_IMPORTED_MODULE_2__[\"default\"].asyncFuture(this._handle.getFile());\r\n    }\r\n    arrayBuffer() {\r\n        return this._loadFile().thenApplyAsync(file => file.arrayBuffer());\r\n    }\r\n    text() {\r\n        return this._loadFile().thenApplyAsync(file => file.text());\r\n    }\r\n    name() {\r\n        let name;\r\n        if (this._handle)\r\n            name = this._handle.name;\r\n        else if (this._file && this._file.isDone())\r\n            name = this._file.getNow().name;\r\n        else\r\n            return undefined;\r\n        this._lastKnownName = name;\r\n    }\r\n    lastModified() {\r\n        return this._loadFile().thenApply(file => file.lastModified);\r\n    }\r\n    delete() {\r\n        if (this._handle[\"remove\"])\r\n            return _rpe_util_Future__WEBPACK_IMPORTED_MODULE_2__[\"default\"].asyncFuture(this._handle[\"remove\"]()).thenApply(_ => true);\r\n        else\r\n            throw new _rpe_error_UnsupportedOperationError__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"RPEBrowserLocalFile.delete()\");\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://resourcepackeditor-browser/./src/platforms/browser/RPEBrowserLocalFile.ts?");

/***/ }),

/***/ "./src/platforms/browser/RPEBrowserLocalFileBinding.ts":
/*!*************************************************************!*\
  !*** ./src/platforms/browser/RPEBrowserLocalFileBinding.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RPEBrowserLocalFileBinding)\n/* harmony export */ });\n/* harmony import */ var _rpe_platform_RPEPlatformLocalFileBinding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../rpe/platform/RPEPlatformLocalFileBinding */ \"./src/rpe/platform/RPEPlatformLocalFileBinding.ts\");\n/* harmony import */ var _rpe_util_Future__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../rpe/util/Future */ \"./src/rpe/util/Future.ts\");\n/* harmony import */ var _BrowserUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BrowserUtils */ \"./src/platforms/browser/BrowserUtils.ts\");\n/* harmony import */ var _RPEBrowserLocalFile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RPEBrowserLocalFile */ \"./src/platforms/browser/RPEBrowserLocalFile.ts\");\n\r\n\r\n\r\n\r\nclass RPEBrowserLocalFileBinding extends _rpe_platform_RPEPlatformLocalFileBinding__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(_BrowserUtils__WEBPACK_IMPORTED_MODULE_2__[\"default\"].BINDING_KEY);\r\n    }\r\n    /**\r\n     * Shows a file picker to allow the user to select\r\n     * a single file to save to.\r\n     *\r\n     * The `fileTypes` array can be set to indicate what\r\n     * type of file the user can save. The `description`\r\n     * field contains a short description of the file type,\r\n     * and the `accept` property contains an object, where\r\n     * the keys are set to the possible MIME types, and the\r\n     * values are arrays containing allowed file extensions.\r\n     *\r\n     * An example of this is the following:\r\n     * ```\r\n     * saveFilePicker([\r\n     *  {\r\n     *      description: \"PNG Image\"\r\n     *      accept: {\r\n     *          \"image/png\": [\".png\"]\r\n     *      }\r\n     *  },\r\n     *  {\r\n     *      description: \"JPG Image\"\r\n     *      accept: {\r\n     *          \"image/jpg\": [\".jpg\", \".jpeg\"]\r\n     *      }\r\n     *  }\r\n     * ])\r\n     * ```\r\n     *\r\n     * @param {string|undefined} suggestedFileName the suggested file name\r\n     * @param {{description: string, accept: {[mimeType: string]: string[]}}[]} fileTypes the possible file types\r\n     * @param {boolean} excludeAllTypesOption `true` to disable the `All Types (*.*)` option, defaults to `false`\r\n     * @returns {Future<RPEPlatformLocalFile[]>} a new Future\r\n     */\r\n    saveFilePicker(suggestedFileName = undefined, fileTypes = [], excludeAllTypesOption = false) {\r\n        let options = {};\r\n        if (suggestedFileName)\r\n            options.suggestedName = suggestedFileName;\r\n        if (fileTypes && fileTypes.length > 0) {\r\n            options.types = fileTypes;\r\n        }\r\n        if (excludeAllTypesOption)\r\n            options.excludeAcceptAllOption = excludeAllTypesOption;\r\n        return _rpe_util_Future__WEBPACK_IMPORTED_MODULE_1__[\"default\"].asyncFuture(/** @type {Promise<FileSystemFileHandle>} */ (showSaveFilePicker(options))).thenApply(handle => {\r\n            return [new _RPEBrowserLocalFile__WEBPACK_IMPORTED_MODULE_3__[\"default\"](handle)];\r\n        });\r\n    }\r\n    /**\r\n     * Opens a file picker to allow the user to select\r\n     * a single file. For multiple files, use\r\n     * {@link RPEPlatformBindingLocalFile.openFilePickerMultiple()}.\r\n     *\r\n     * The `fileTypes` array can be set to indicate what\r\n     * type of file the user can select. The `description`\r\n     * field contains a short description of the file type,\r\n     * and the `accept` property contains an object, where\r\n     * the keys are set to the accepted MIME type, and the\r\n     * values are arrays containing allowed file extensions.\r\n     *\r\n     * An example of this is the following:\r\n     * ```\r\n     * openFilePicker([{\r\n     *     description: \"Images\"\r\n     *     accept: {\r\n     *         \"image/*\": [\".png\", \".gif\", \".jpg\", \".jpeg\"]\r\n     *     }\r\n     * }])\r\n     * ```\r\n     *\r\n     * @param {{description: string, accept: {[mimeType: string]: string[]}}[]} fileTypes the allowed file types\r\n     * @param {boolean} excludeAllTypesOption `true` to disable the `All Types (*.*)` option, defaults to `false`\r\n     * @returns {Future<RPEPlatformLocalFile[]>} a new Future\r\n     */\r\n    openFilePicker(fileTypes = [], excludeAllTypesOption = false) {\r\n        let options = {};\r\n        if (fileTypes && fileTypes.length > 0) {\r\n            options.types = fileTypes;\r\n        }\r\n        if (excludeAllTypesOption)\r\n            options.excludeAcceptAllOption = excludeAllTypesOption;\r\n        return _rpe_util_Future__WEBPACK_IMPORTED_MODULE_1__[\"default\"].asyncFuture(/** @type {Promise<FileSystemFileHandle[]>} */ (showOpenFilePicker(options))).thenApply(handles => {\r\n            return handles.map(handle => new _RPEBrowserLocalFile__WEBPACK_IMPORTED_MODULE_3__[\"default\"](handle));\r\n        });\r\n    }\r\n    /**\r\n     * Opens a file picker to allow the user to select\r\n     * one or more file(s). For single files only, use\r\n     * {@link RPEPlatformBindingLocalFile.openFilePicker()}.\r\n     *\r\n     * The `fileTypes` array can be set to indicate what\r\n     * type of files the user can select. The `description`\r\n     * field contains a short description of the file type,\r\n     * and the `accept` property contains an object, where\r\n     * the keys are set to the accepted MIME type, and the\r\n     * values are arrays containing allowed file extensions.\r\n     *\r\n     * An example of this is the following:\r\n     * ```\r\n     * openFilePickerMultiple([{\r\n     *     description: \"Images\"\r\n     *     accept: {\r\n     *         \"image/*\": [\".png\", \".gif\", \".jpg\", \".jpeg\"]\r\n     *     }\r\n     * }])\r\n     * ```\r\n     *\r\n     * @param {{description: string, accept: {[mimeType: string]: string[]}}[]} fileTypes the allowed file types\r\n     * @param {boolean} excludeAllTypesOption `true` to disable the `All Types (*.*)` option, defaults to `false`\r\n     * @returns {Future<RPEPlatformLocalFile[]>} a new Future\r\n     */\r\n    openFilePickerMultiple(fileTypes = [], excludeAllTypesOption = false) {\r\n        let options = {\r\n            multiple: true\r\n        };\r\n        if (fileTypes && fileTypes.length > 0) {\r\n            options.types = fileTypes;\r\n        }\r\n        if (excludeAllTypesOption)\r\n            options.excludeAcceptAllOption = excludeAllTypesOption;\r\n        return _rpe_util_Future__WEBPACK_IMPORTED_MODULE_1__[\"default\"].asyncFuture(/** @type {Promise<FileSystemFileHandle[]>} */ (showOpenFilePicker(options))).thenApply(handles => {\r\n            return handles.map(handle => new _RPEBrowserLocalFile__WEBPACK_IMPORTED_MODULE_3__[\"default\"](handle));\r\n        });\r\n    }\r\n    /**\r\n     * Loads a file from its serialized form.\r\n     * @param {*} serialized the serialized object\r\n     * @returns {Future<RPEPlatformLocalFile>} a new Future\r\n     */\r\n    loadSerialized(serialized) {\r\n        this.throw(this.loadSerialized);\r\n    }\r\n    /**\r\n     * Loads one or more files from its serialized form(s).\r\n     * @param {*[]} serialized the serialized array\r\n     * @returns {Future<RPEPlatformLocalFile[]>} a new Future\r\n     */\r\n    loadSerializedMultiple(serialized) {\r\n        this.throw(this.loadSerializedMultiple);\r\n    }\r\n}\r\n;\r\n\n\n//# sourceURL=webpack://resourcepackeditor-browser/./src/platforms/browser/RPEBrowserLocalFileBinding.ts?");

/***/ }),

/***/ "./src/platforms/browser/index.ts":
/*!****************************************!*\
  !*** ./src/platforms/browser/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _rpe_platform_RPEPlatformLocalFile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../rpe/platform/RPEPlatformLocalFile */ \"./src/rpe/platform/RPEPlatformLocalFile.ts\");\n/* harmony import */ var _BrowserUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BrowserUtils */ \"./src/platforms/browser/BrowserUtils.ts\");\n/* harmony import */ var _RPEBrowserLocalFileBinding__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RPEBrowserLocalFileBinding */ \"./src/platforms/browser/RPEBrowserLocalFileBinding.ts\");\n\r\n\r\n\r\n_rpe_platform_RPEPlatformLocalFile__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BINDING = new _RPEBrowserLocalFileBinding__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\r\nwindow[\"BrowserConstants\"] = _BrowserUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\r\n\n\n//# sourceURL=webpack://resourcepackeditor-browser/./src/platforms/browser/index.ts?");

/***/ }),

/***/ "./src/rpe/error/FailedRequestError.ts":
/*!*********************************************!*\
  !*** ./src/rpe/error/FailedRequestError.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FailedRequestError)\n/* harmony export */ });\n/* harmony import */ var _JError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JError */ \"./src/rpe/error/JError.ts\");\n\r\nclass FailedRequestError extends _JError__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n}\r\n\n\n//# sourceURL=webpack://resourcepackeditor-browser/./src/rpe/error/FailedRequestError.ts?");

/***/ }),

/***/ "./src/rpe/error/IllegalStateError.ts":
/*!********************************************!*\
  !*** ./src/rpe/error/IllegalStateError.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IllegalStateError)\n/* harmony export */ });\n/* harmony import */ var _JError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JError */ \"./src/rpe/error/JError.ts\");\n\r\nclass IllegalStateError extends _JError__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n}\r\n\n\n//# sourceURL=webpack://resourcepackeditor-browser/./src/rpe/error/IllegalStateError.ts?");

/***/ }),

/***/ "./src/rpe/error/UnsupportedOperationError.ts":
/*!****************************************************!*\
  !*** ./src/rpe/error/UnsupportedOperationError.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ UnsupportedOperationError)\n/* harmony export */ });\n/* harmony import */ var _JError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JError */ \"./src/rpe/error/JError.ts\");\n\r\nclass UnsupportedOperationError extends _JError__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n}\r\n\n\n//# sourceURL=webpack://resourcepackeditor-browser/./src/rpe/error/UnsupportedOperationError.ts?");

/***/ }),

/***/ "./src/rpe/platform/PlatformBinding.ts":
/*!*********************************************!*\
  !*** ./src/rpe/platform/PlatformBinding.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PlatformBinding)\n/* harmony export */ });\n/* harmony import */ var _PlatformBindingError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PlatformBindingError */ \"./src/rpe/platform/PlatformBindingError.ts\");\n\r\nclass PlatformBinding {\r\n    /**\r\n     * Creates a new platform binding.\r\n     * @param platform the platform string, or `undefined` for the default platform binding\r\n     */\r\n    constructor(platform = undefined) {\r\n        this._platform = platform;\r\n    }\r\n    /**\r\n     * Returns the platform implementation's name, or\r\n     * `undefined` if this is the default implementation.\r\n     */\r\n    get platform() {\r\n        return this._platform;\r\n    }\r\n    /**\r\n     * Throws a PlatformBindingError, stating that either\r\n     * the implementation of the passed method, or\r\n     * the platform binding is missing for this class.\r\n     * @param method the method\r\n     * @returns\r\n     */\r\n    throw(method) {\r\n        throw new _PlatformBindingError__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this._platform, this.constructor[\"name\"], method.name);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://resourcepackeditor-browser/./src/rpe/platform/PlatformBinding.ts?");

/***/ }),

/***/ "./src/rpe/platform/PlatformBindingError.ts":
/*!**************************************************!*\
  !*** ./src/rpe/platform/PlatformBindingError.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PlatformBindingError)\n/* harmony export */ });\nclass PlatformBindingError extends Error {\r\n    /**\r\n     * Creates a new PlatformBindingError.\r\n     * @param platform the platform, or `undefined` for the default implementation\r\n     * @param className the class name\r\n     * @param methodName the method that was used\r\n     */\r\n    constructor(platform, className, methodName) {\r\n        super(PlatformBindingError._message(platform, className, methodName));\r\n        this.name = \"PlatformBindingError\";\r\n    }\r\n    /**\r\n     * Returns the correct error message\r\n     * @param platform the platform, or `undefined` for the default implementation\r\n     * @param className the class name\r\n     * @param methodName the method that was used\r\n     * @returns the error message\r\n     */\r\n    static _message(platform, className, methodName) {\r\n        if (platform)\r\n            return \"Platform bindings on platform \\\"\" + platform + \"\\\" for class \\\"\" + className + \"\\\" does not implement the method \\\"\" + methodName + \"()\\\"!\";\r\n        else\r\n            return \"Missing platform bindings for class \\\"\" + className + \"\\\"!\";\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://resourcepackeditor-browser/./src/rpe/platform/PlatformBindingError.ts?");

/***/ }),

/***/ "./src/rpe/platform/RPEPlatformLocalEntry.ts":
/*!***************************************************!*\
  !*** ./src/rpe/platform/RPEPlatformLocalEntry.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RPEPlatformLocalEntry)\n/* harmony export */ });\n/* harmony import */ var _error_IllegalStateError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/IllegalStateError */ \"./src/rpe/error/IllegalStateError.ts\");\n/* harmony import */ var _PlatformBinding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PlatformBinding */ \"./src/rpe/platform/PlatformBinding.ts\");\n\r\n\r\n/**\r\n * Represents a file or directory in the local file system.\r\n */\r\nclass RPEPlatformLocalEntry extends _PlatformBinding__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n    /**\r\n     * Returns whether this {@link RPEPlatformLocalEntry}\r\n     * instance represents a directory.\r\n     * @returns `true` if this is a directory, `false` otherwise\r\n     * @see {@link RPEPlatformLocalEntry.asDirectory()}\r\n     */\r\n    isDirectory() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Returns this entry as a {@link RPEPlatformLocalDirectory},\r\n     * if this entry represents a directory. Otherwise,\r\n     * this method throws an {@link IllegalStateError}.\r\n     * @returns this entry as a directory\r\n     * @throws {IllegalStateError} if this entry does not represent a directory\r\n     * @see {@link RPEPlatformLocalEntry.isDirectory()}\r\n     */\r\n    asDirectory() {\r\n        throw new _error_IllegalStateError__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"this entry is not a directory!\");\r\n    }\r\n    /**\r\n     * Returns whether this {@link RPEPlatformLocalEntry}\r\n     * instance represents a file.\r\n     * @returns `true` if this is a file, `false` otherwise\r\n     * @see {@link RPEPlatformLocalEntry.asFile()}\r\n     */\r\n    isFile() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Returns this entry as a {@link RPEPlatformLocalFile},\r\n     * if this entry represents a file. Otherwise,\r\n     * this method throws an {@link IllegalStateError}.\r\n     * @returns this entry as a file\r\n     * @throws {IllegalStateError} if this entry does not represent a file\r\n     * @see {@link RPEPlatformLocalEntry.isFile()}\r\n     */\r\n    asFile() {\r\n        throw new _error_IllegalStateError__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"this entry is not a file!\");\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://resourcepackeditor-browser/./src/rpe/platform/RPEPlatformLocalEntry.ts?");

/***/ }),

/***/ "./src/rpe/platform/RPEPlatformLocalFile.ts":
/*!**************************************************!*\
  !*** ./src/rpe/platform/RPEPlatformLocalFile.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RPEPlatformLocalFile)\n/* harmony export */ });\n/* harmony import */ var _RPEPlatformLocalEntry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RPEPlatformLocalEntry */ \"./src/rpe/platform/RPEPlatformLocalEntry.ts\");\n/* harmony import */ var _RPEPlatformLocalFileBinding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RPEPlatformLocalFileBinding */ \"./src/rpe/platform/RPEPlatformLocalFileBinding.ts\");\n\r\n\r\nclass RPEPlatformLocalFile extends _RPEPlatformLocalEntry__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    /**\r\n     * Shows a file picker to allow the user to select\r\n     * a single file to save to.\r\n     *\r\n     * The `fileTypes` array can be set to indicate what\r\n     * type of file the user can save. The `description`\r\n     * field contains a short description of the file type,\r\n     * and the `accept` property contains an object, where\r\n     * the keys are set to the possible MIME types, and the\r\n     * values are arrays containing allowed file extensions.\r\n     *\r\n     * An example of this is the following:\r\n     * ```\r\n     * saveFilePicker([\r\n     *  {\r\n     *      description: \"PNG Image\"\r\n     *      accept: {\r\n     *          \"image/png\": [\".png\"]\r\n     *      }\r\n     *  },\r\n     *  {\r\n     *      description: \"JPG Image\"\r\n     *      accept: {\r\n     *          \"image/jpg\": [\".jpg\", \".jpeg\"]\r\n     *      }\r\n     *  }\r\n     * ])\r\n     * ```\r\n     *\r\n     * @param suggestedFileName the suggested file name\r\n     * @param fileTypes the possible file types\r\n     * @param excludeAllTypesOption `true` to disable the `All Types (*.*)` option, defaults to `false`\r\n     * @returns a new Future\r\n     */\r\n    static saveFilePicker(suggestedFileName = undefined, fileTypes = [], excludeAllTypesOption = false) {\r\n        return RPEPlatformLocalFile.BINDING.saveFilePicker(suggestedFileName, fileTypes, excludeAllTypesOption);\r\n    }\r\n    /**\r\n     * Opens a file picker to allow the user to select\r\n     * a single file. For multiple files, use\r\n     * {@link RPEPlatformLocalFileBinding.openFilePickerMultiple()}.\r\n     *\r\n     * The `fileTypes` array can be set to indicate what\r\n     * type of file the user can select. The `description`\r\n     * field contains a short description of the file type,\r\n     * and the `accept` property contains an object, where\r\n     * the keys are set to the accepted MIME type, and the\r\n     * values are arrays containing allowed file extensions.\r\n     *\r\n     * An example of this is the following:\r\n     * ```\r\n     * openFilePicker([{\r\n     *     description: \"Images\"\r\n     *     accept: {\r\n     *         \"image/*\": [\".png\", \".gif\", \".jpg\", \".jpeg\"]\r\n     *     }\r\n     * }])\r\n     * ```\r\n     *\r\n     * @param fileTypes the allowed file types\r\n     * @param excludeAllTypesOption `true` to disable the `All Types (*.*)` option, defaults to `false`\r\n     * @returns a new Future\r\n     */\r\n    static openFilePicker(fileTypes = [], excludeAllTypesOption = false) {\r\n        return RPEPlatformLocalFile.BINDING.openFilePicker(fileTypes, excludeAllTypesOption);\r\n    }\r\n    /**\r\n     * Opens a file picker to allow the user to select\r\n     * one or more file(s). For single files only, use\r\n     * {@link RPEPlatformLocalFileBinding.openFilePicker()}.\r\n     *\r\n     * The `fileTypes` array can be set to indicate what\r\n     * type of files the user can select. The `description`\r\n     * field contains a short description of the file type,\r\n     * and the `accept` property contains an object, where\r\n     * the keys are set to the accepted MIME type, and the\r\n     * values are arrays containing allowed file extensions.\r\n     *\r\n     * An example of this is the following:\r\n     * ```\r\n     * openFilePickerMultiple([{\r\n     *     description: \"Images\"\r\n     *     accept: {\r\n     *         \"image/*\": [\".png\", \".gif\", \".jpg\", \".jpeg\"]\r\n     *     }\r\n     * }])\r\n     * ```\r\n     *\r\n     * @param fileTypes the allowed file types\r\n     * @param excludeAllTypesOption `true` to disable the `All Types (*.*)` option, defaults to `false`\r\n     * @returns a new Future\r\n     */\r\n    static openFilePickerMultiple(fileTypes = [], excludeAllTypesOption = false) {\r\n        return RPEPlatformLocalFile.BINDING.openFilePickerMultiple(fileTypes, excludeAllTypesOption);\r\n    }\r\n    /**\r\n     * Loads a file from its serialized form.\r\n     * @param serialized the serialized object\r\n     * @returns a new Future\r\n     */\r\n    static loadSerialized(serialized) {\r\n        return RPEPlatformLocalFile.BINDING.loadSerialized(serialized);\r\n    }\r\n    /**\r\n     * Loads one or more files from its serialized form(s).\r\n     * @param serialized the serialized array\r\n     * @returns a new Future\r\n     */\r\n    static loadSerializedMultiple(serialized) {\r\n        return RPEPlatformLocalFile.BINDING.loadSerializedMultiple(serialized);\r\n    }\r\n    isFile() {\r\n        return true;\r\n    }\r\n    asFile() {\r\n        return this;\r\n    }\r\n}\r\n/**\r\n * The platform binding for this class.\r\n */\r\nRPEPlatformLocalFile.BINDING = new _RPEPlatformLocalFileBinding__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n\n\n//# sourceURL=webpack://resourcepackeditor-browser/./src/rpe/platform/RPEPlatformLocalFile.ts?");

/***/ }),

/***/ "./src/rpe/platform/RPEPlatformLocalFileBinding.ts":
/*!*********************************************************!*\
  !*** ./src/rpe/platform/RPEPlatformLocalFileBinding.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RPEPlatformLocalFileBinding)\n/* harmony export */ });\n/* harmony import */ var _PlatformBinding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PlatformBinding */ \"./src/rpe/platform/PlatformBinding.ts\");\n\r\nclass RPEPlatformLocalFileBinding extends _PlatformBinding__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    /**\r\n     * Shows a file picker to allow the user to select\r\n     * a single file to save to.\r\n     *\r\n     * The `fileTypes` array can be set to indicate what\r\n     * type of file the user can save. The `description`\r\n     * field contains a short description of the file type,\r\n     * and the `accept` property contains an object, where\r\n     * the keys are set to the possible MIME types, and the\r\n     * values are arrays containing allowed file extensions.\r\n     *\r\n     * An example of this is the following:\r\n     * ```\r\n     * saveFilePicker([\r\n     *  {\r\n     *      description: \"PNG Image\"\r\n     *      accept: {\r\n     *          \"image/png\": [\".png\"]\r\n     *      }\r\n     *  },\r\n     *  {\r\n     *      description: \"JPG Image\"\r\n     *      accept: {\r\n     *          \"image/jpg\": [\".jpg\", \".jpeg\"]\r\n     *      }\r\n     *  }\r\n     * ])\r\n     * ```\r\n     *\r\n     * @param suggestedFileName the suggested file name\r\n     * @param fileTypes the possible file types\r\n     * @param excludeAllTypesOption `true` to disable the `All Types (*.*)` option, defaults to `false`\r\n     * @returns a new Future\r\n     */\r\n    saveFilePicker(suggestedFileName = undefined, fileTypes = [], excludeAllTypesOption = false) {\r\n        this.throw(this.saveFilePicker);\r\n    }\r\n    /**\r\n     * Opens a file picker to allow the user to select\r\n     * a single file. For multiple files, use\r\n     * {@link RPEPlatformLocalFileBinding.openFilePickerMultiple()}.\r\n     *\r\n     * The `fileTypes` array can be set to indicate what\r\n     * type of file the user can select. The `description`\r\n     * field contains a short description of the file type,\r\n     * and the `accept` property contains an object, where\r\n     * the keys are set to the accepted MIME type, and the\r\n     * values are arrays containing allowed file extensions.\r\n     *\r\n     * An example of this is the following:\r\n     * ```\r\n     * openFilePicker([{\r\n     *     description: \"Images\"\r\n     *     accept: {\r\n     *         \"image/*\": [\".png\", \".gif\", \".jpg\", \".jpeg\"]\r\n     *     }\r\n     * }])\r\n     * ```\r\n     *\r\n     * @param fileTypes the allowed file types\r\n     * @param excludeAllTypesOption `true` to disable the `All Types (*.*)` option, defaults to `false`\r\n     * @returns a new Future\r\n     */\r\n    openFilePicker(fileTypes = [], excludeAllTypesOption = false) {\r\n        this.throw(this.openFilePicker);\r\n    }\r\n    /**\r\n     * Opens a file picker to allow the user to select\r\n     * one or more file(s). For single files only, use\r\n     * {@link RPEPlatformLocalFileBinding.openFilePicker()}.\r\n     *\r\n     * The `fileTypes` array can be set to indicate what\r\n     * type of files the user can select. The `description`\r\n     * field contains a short description of the file type,\r\n     * and the `accept` property contains an object, where\r\n     * the keys are set to the accepted MIME type, and the\r\n     * values are arrays containing allowed file extensions.\r\n     *\r\n     * An example of this is the following:\r\n     * ```\r\n     * openFilePickerMultiple([{\r\n     *     description: \"Images\"\r\n     *     accept: {\r\n     *         \"image/*\": [\".png\", \".gif\", \".jpg\", \".jpeg\"]\r\n     *     }\r\n     * }])\r\n     * ```\r\n     *\r\n     * @param fileTypes the allowed file types\r\n     * @param excludeAllTypesOption `true` to disable the `All Types (*.*)` option, defaults to `false`\r\n     * @returns a new Future\r\n     */\r\n    openFilePickerMultiple(fileTypes = [], excludeAllTypesOption = false) {\r\n        this.throw(this.openFilePickerMultiple);\r\n    }\r\n    /**\r\n     * Loads a file from its serialized form.\r\n     * @param serialized the serialized object\r\n     * @returns a new Future\r\n     */\r\n    loadSerialized(serialized) {\r\n        this.throw(this.loadSerialized);\r\n    }\r\n    /**\r\n     * Loads one or more files from its serialized form(s).\r\n     * @param serialized the serialized array\r\n     * @returns a new Future\r\n     */\r\n    loadSerializedMultiple(serialized) {\r\n        this.throw(this.loadSerializedMultiple);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://resourcepackeditor-browser/./src/rpe/platform/RPEPlatformLocalFileBinding.ts?");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/platforms/browser/index.ts"));
/******/ }
]);